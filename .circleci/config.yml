version: 2.1
orbs:
  slack: circleci/slack@3.4.2

jobs:
  install:
    working_directory: ~/etherspot-modular-sdk
    docker:
      - image: cimg/node:20.11.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Install Bun
          command: |
            curl -fsSL https://bun.sh/install | bash
            echo 'export BUN_INSTALL="$HOME/.bun"' >> $BASH_ENV
            echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$ETHERSPOT_NPM_TOKEN" > ~/etherspot-modular-sdk/.npmrc
      - restore_cache:
          key: dependency-cache-{{ checksum "bun.lockb" }}
      - run:
          name: Install dependencies
          command: bun install
      - save_cache:
          key: dependency-cache-{{ checksum "bun.lockb" }}
          paths:
            - ./node_modules
            - ~/.bun
      - run:
          name: Dry run build
          command: bun run build

  e2e-tests:
    working_directory: ~/etherspot-modular-sdk
    docker:
      - image: cimg/node:20.11.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Install Bun
          command: |
            curl -fsSL https://bun.sh/install | bash
            echo 'export BUN_INSTALL="$HOME/.bun"' >> $BASH_ENV
            echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - restore_cache:
          key: dependency-cache-{{ checksum "bun.lockb" }}
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$ETHERSPOT_NPM_TOKEN" > ~/etherspot-modular-sdk/.npmrc
      - run:
          name: Install dependencies
          command: bun install
      - run:
          name: Build Etherpot Modular SDK
          command: bun run build
      - run:
          name: Checkout e2e repo and run tests
          no_output_timeout: 60m
          command: |
            cd ~
            git clone https://github.com/etherspot/e2e-sdk-modular.git
            cd e2e-sdk-modular
            git checkout master
            sed -i.bak "s/private_key/$PRIVATE_KEY/g" .env
            sed -i.bak "s/project_key/$PROJECT_KEY/g" .env
            sed -i.bak "s/project_key_testnet/$PROJECT_KEY_TESTNET/g" .env
            sed -i.bak "s/api_key/$API_KEY/g" .env
            sed -i.bak "s/incorrect_api_key_arka/$INCORRECT_API_KEY_ARKA/g" .env
            sed -i.bak "s/invalid_api_key_arka/$INVALID_API_KEY_ARKA/g" .env
            sed -i.bak "s/bundler_api_key/$BUNDLER_API_KEY/g" .env
            sed -i.bak "s/data_api_key/$DATA_API_KEY/g" .env
            sed -i.bak "s/api_key_arka/$API_KEY_ARKA/g" .env
            sed -i.bak "s/api_key_sessionkey/$API_KEY_SESSIONKEY/g" .env
            sed -i.bak "s/primary_private_key/$PRIMARY_PRIVATE_KEY/g" .env
            sed -i.bak "s/secondary_private_key/$SECONDARY_PRIVATE_KEY/g" .env
            sed -i.bak "s/primary_wallet_address/$PRIMARY_WALLET_ADDRESS/g" .env
            sed -i.bak "s/secondary_wallet_address/$SECONDARY_WALLET_ADDRESS/g" .env
            sed -i.bak "s/paymaster_address/$PAYMASTER_ADDRESS/g" .env
            sed -i.bak "s/sponsor_address/$SPONSOR_ADDRESS/g" .env
            mv package.json temp.json
            jq -r '.dependencies."@etherspot/modular-sdk" |= "file:../etherspot-modular-sdk"' temp.json > package.json
            rm temp.json
            npm i
            npm run test-all-chains 
      - store_artifacts:
          path: /home/circleci/e2e-sdk-modular/reports
          destination: test-report
      - run:
          name: Parse and send E2E test results to Slack
          when: always
          command: |
            MOCHAWESOME_JSON_FILE=/home/circleci/e2e-sdk-modular/reports/aggregated-report.json
            FAILED_TESTS_FILE=failed-tests.txt
            # same parsing + slack notification script as before...

  publish-npm-package:
    working_directory: ~/etherspot-modular-sdk
    docker:
      - image: cimg/node:20.11.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Install Bun
          command: |
            curl -fsSL https://bun.sh/install | bash
            echo 'export BUN_INSTALL="$HOME/.bun"' >> $BASH_ENV
            echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
      - restore_cache:
          key: dependency-cache-{{ checksum "bun.lockb" }}
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$ETHERSPOT_NPM_TOKEN" > ~/etherspot-modular-sdk/.npmrc
      - run:
          name: Install dependencies
          command: bun install
      - run:
          name: Build Etherpot Prime SDK
          command: bun run build
      - run:
          name: Publish package to npm
          command: |
            cd ~/etherspot-modular-sdk
            bun publish --access public
      - run:
          name: Announce Publish
          command: |
            chmod +x .circleci/announcePublish.sh
            .circleci/announcePublish.sh "Etherspot Modular SDK" "$(node -e "console.log(require('./package.json').version)")"

  publish-github-release:
    docker:
      - image: ardd97/ghr
    steps:
      - checkout
      - run:
          name: "Publish Release on GitHub"
          command: |
            PACKAGE_VERSION="$(jq .version package.json -r)"
            echo $PACKAGE_VERSION
            ghr -t "${GITHUB_TOKEN}" -u "${CIRCLE_PROJECT_USERNAME}" -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" "$PACKAGE_VERSION"

workflows:
  install-and-publish:
    jobs:
      - install:
          context: general-vars
          filters:
            branches:
              only:
                - master

      - e2e-tests:
          name: testnet-e2e-tests
          context: general-vars
          filters:
            branches:
              only:
                - master

      - publish-npm-package:
          context: general-vars
          requires:
            - testnet-e2e-tests
          filters:
            branches:
              only:
                - master

      - publish-github-release:
          context: general-vars
          requires:
            - publish-npm-package
          filters:
            branches:
              only:
                - master
