import { Wallet, BytesLike } from 'ethers';
import { _TypedDataEncoder, defaultAbiCoder, Deferrable, hashMessage } from 'ethers/lib/utils';
import { MessagePayload, TransactionRequest, TransactionResponse, WalletProvider } from './interfaces';
import { getBytes } from '../../common';

export class KeyWalletProvider implements WalletProvider {
  readonly type = 'Key';
  readonly address: string;
  readonly accountAddress: string;

  readonly wallet: Wallet;

  constructor(privateKey: string) {
    this.wallet = new Wallet(privateKey);

    const { address } = this.wallet;

    this.address = address;
  }

  async signMessage(message: BytesLike, validatorAddress?: string, factoryAddress?: string, initCode?: string): Promise<string> {
    const msg = getBytes(hashMessage(getBytes(message)));
    const signature = await this.wallet.signMessage(msg);
    if (initCode !== "0x") {
      const abiCoderResult = defaultAbiCoder.encode(['address', 'bytes', 'bytes'],[factoryAddress, initCode, signature]);
      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes
    }
    return validatorAddress + signature.slice(2)
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signTypedData(msg: MessagePayload, validatorAddress?: string, factoryAddress?: string, initCode?: string): Promise<string> {
    if (msg.types.EIP712Domain) delete msg.types.EIP712Domain; // https://github.com/ethers-io/ethers.js/issues/687#issuecomment-714069471
    const structHash = _TypedDataEncoder.hash(msg.domain, msg.types, msg.message)
    // const signature = await this.wallet._signTypedData(msg.domain, msg.types, msg.message)
    const signature = await this.wallet.signMessage(getBytes(structHash));

    if (initCode !== "0x") {
      // const abiCoderResult = defaultAbiCoder.encode(['bytes', 'bytes'],[initCode, signature]);
      const abiCoderResult = defaultAbiCoder.encode(['address', 'bytes', 'bytes'],[factoryAddress, '0x000000000000000000000000260e35d7dcddaa7b558d0ff322f5ddd1109f5dab0000000000000000000000001bacb2f1ef4fd02f02e32ccf70888d9caeb5f06600000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000444642219af0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008c4496ba340afe5ac4148cfea9ccbbcd54093143000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000446d61fed61fe7000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000446d61fed61fe70000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', signature]);
      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes
    }
    return validatorAddress + signature.slice(2);
  }

  async eth_requestAccounts(address: string): Promise<string[]> {
    return [address];
  }

  async eth_accounts(address: string): Promise<string[]> {
    return [address];
  }

  async signUserOp(message: BytesLike): Promise<string> {
    return this.wallet.signMessage(message);
  }

  async eth_sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {
    return this.wallet.sendTransaction(transaction);
  }

  async eth_signTransaction(transaction: TransactionRequest): Promise<string> {
    return this.wallet.signTransaction(transaction);
  }

}
