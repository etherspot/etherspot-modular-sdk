{"version":3,"sources":["../../../../../src/sdk/wallet/providers/interfaces.ts"],"sourcesContent":["import { Address, Hash, Hex, TransactionRequest, TypedDataDomain, WalletClient } from 'viem';\nimport { UniversalProvider } from '@walletconnect/universal-provider';\nimport { UniqueSubject } from '../../common/index.js';\nimport { NetworkNames } from '../../network/index.js';\n\nexport interface WalletProvider {\n  readonly type?: string;\n  readonly wallet?: WalletClient;\n  readonly address: string;\n  readonly address$?: UniqueSubject<string>;\n  readonly networkName?: NetworkNames;\n  readonly networkName$?: UniqueSubject<NetworkNames>;\n\n  signTypedData(msg: MessagePayload, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string>;\n\n  signMessage(message: string, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string>;\n\n  signUserOp(message: Hex): Promise<string>;\n\n  eth_requestAccounts(address?: string): Promise<string[]>;\n\n  eth_accounts(address?: string): Promise<string[]>;\n\n  eth_sendTransaction(transaction: TransactionRequest): Promise<Hash>;\n\n  eth_signTransaction(transaction: TransactionRequest): Promise<string>;\n}\n\nexport interface Web3Provider {\n  send(payload: any, callback: (err: any, response?: any) => any): any;\n}\n\n// https://eips.ethereum.org/EIPS/eip-712#parameters\nexport type MessagePayload = {\n  domain: TypedDataDomain;\n  types: Record<string, TypedProperty[]>;\n  primaryType: string;\n  message: any;\n};\n\n// https://eips.ethereum.org/EIPS/eip-712#definition-of-typed-structured-data-%F0%9D%95%8A\ntype TypedProperty = {\n  name: string;\n  type: string;\n};\n\n\nexport interface RequestArguments {\n  method: string;\n  params?: unknown[] | object;\n}\nexport interface Web3eip1193Provider {\n  request(args: RequestArguments): any;\n}\n\nexport interface WalletConnectConnector {\n  accounts: string[];\n  chainId: number;\n  signPersonalMessage(params: any[]): Promise<any>;\n  request<T = unknown>(args: RequestArguments): Promise<T>;\n  on(event: string, callback: (error: Error | null, payload: any | null) => void): void;\n}\n\nexport interface WalletLike {\n  privateKey: string;\n}\n\nexport declare class EthereumProvider {\n  accounts: string[];\n  signer: InstanceType<typeof UniversalProvider>;\n  chainId: number;\n  request<T = unknown>(args: RequestArguments): Promise<T>;\n  sendAsync(args: RequestArguments, callback: (error: Error | null, response: any) => void): void;\n  disconnect(): Promise<void>;\n  on(event: string, callback: (error: Error | null, payload: any | null) => void): void;\n  once(event: string, callback: (error: Error | null, payload: any | null) => void): void;\n  removeListener(event: string, callback: (error: Error | null, payload: any | null) => void): void;\n  off(event: string, callback: (error: Error | null, payload: any | null) => void): void;\n  readonly isWalletConnect?: boolean;\n}\n\nexport type WalletProviderLike = string | WalletLike | WalletProvider | EthereumProvider | WalletClient;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}