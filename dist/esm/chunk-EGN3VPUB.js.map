{"version":3,"sources":["../../src/sdk/wallet/wallet.service.ts"],"sourcesContent":["import { Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Service, ObjectSubject } from '../common/index.js';\nimport { WalletProvider, WalletProviderLike, KeyWalletProvider, WalletLike, MessagePayload, WalletClientProvider } from './providers/index.js';\nimport { Wallet, WalletOptions } from './interfaces.js';\nimport {\n  WalletClient,\n  Hex,\n  TransactionRequest,\n  Hash,\n  Address,\n} from 'viem';\n\nexport class WalletService extends Service {\n  readonly wallet$ = new ObjectSubject<Wallet>();\n  readonly rpcBundlerUrl: string;\n  readonly chainId: number;\n\n  provider: WalletProvider;\n\n  constructor(\n    private providerLike: WalletProviderLike,\n    private options: WalletOptions,\n    public rpcUrl: string,\n    public chain: number\n  ) {\n    super();\n    this.rpcBundlerUrl = rpcUrl;\n    this.chainId = chain;\n  }\n\n  get wallet(): Wallet {\n    return this.wallet$.value;\n  }\n\n  get EOAAddress(): Hex | null {\n    return this.wallet ? this.wallet.address as Hex : null;\n  }\n\n  get walletProvider(): WalletProvider {\n    return this.provider ? this.provider : null;\n  }\n\n  async signMessage(message: Hex, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    return this.provider ? this.provider.signMessage(message, validatorAddress, factoryAddress, initCode) : null;\n  }\n\n  async signTypedData(msg: MessagePayload, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    return this.provider ? this.provider.signTypedData(msg, validatorAddress, factoryAddress, initCode) : null;\n  }\n\n  async eth_requestAccounts(address?: string): Promise<string[]> {\n    return this.provider ? this.provider.eth_requestAccounts(address) : null;\n  }\n\n  async eth_accounts(address?: string): Promise<string[]> {\n    return this.provider ? this.provider.eth_accounts(address) : null;\n  }\n\n  async eth_sendTransaction(transaction: TransactionRequest): Promise<Hash> {\n    return this.provider ? this.provider.eth_sendTransaction(transaction) : null;\n  }\n\n  async eth_signTransaction(transaction: TransactionRequest): Promise<string> {\n    return this.provider ? this.provider.eth_signTransaction(transaction) : null;\n  }\n\n  async signUserOp(message: Hex): Promise<string> {\n    return this.provider ? this.provider.signUserOp(message) : null;\n  }\n\n  protected switchWalletProvider(providerLike: WalletProviderLike): void {\n    let provider: WalletProvider = null;\n    if (providerLike) {\n      switch (typeof providerLike) {\n        case 'object': {\n          const { privateKey } = providerLike as WalletLike;\n          const walletLike = providerLike as WalletClient;\n          const isNotViemClient = walletLike?.account.address === undefined;\n          if (privateKey && isNotViemClient) {\n            provider = new KeyWalletProvider(this.chainId, privateKey);\n          } else {\n            provider = new WalletClientProvider(walletLike);\n          }\n          break;\n        }\n\n        case 'string':\n          provider = new KeyWalletProvider(this.chainId, providerLike);\n          break;\n      }\n    }\n\n    if (!provider) {\n      this.wallet$.next(null);\n\n      this.removeSubscriptions();\n    } else {\n      const { networkService } = this.services;\n      const { type: providerType } = provider;\n\n      const subscriptions: Subscription[] = [];\n      const { address, address$ } = provider;\n\n      if (typeof address$ !== 'undefined') {\n        subscriptions.push(\n          address$\n            .pipe(\n              map((address) => ({\n                address,\n                providerType,\n              })),\n            )\n            .subscribe((wallet) => this.wallet$.next(wallet)),\n        );\n      } else if (typeof address !== 'undefined') {\n        this.wallet$.next({\n          address,\n          providerType,\n        });\n      } else {\n        throw new Error('Invalid wallet address');\n      }\n\n      networkService.useDefaultNetwork();\n\n      this.replaceSubscriptions(...subscriptions);\n    }\n\n    this.provider = provider;\n  }\n\n  protected onInit() {\n    if (this.providerLike) {\n      this.switchWalletProvider(this.providerLike);\n      this.providerLike = null;\n    }\n  }\n}\n"],"mappings":"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","names":["address"]}