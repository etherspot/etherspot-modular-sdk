{"version":3,"sources":["../../src/sdk/network/network.service.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { NetworkConfig } from './index.js';\nimport { ObjectSubject, Service, Exception } from '../common/index.js';\nimport { Networks, CHAIN_ID_TO_NETWORK_NAME, SupportedNetworks, NetworkNames } from './constants.js';\nimport { Network } from './interfaces.js';\n\nexport class NetworkService extends Service {\n  readonly network$ = new ObjectSubject<Network>(null);\n  readonly chainId$: Observable<number>;\n  readonly defaultNetwork: Network;\n  readonly supportedNetworks: Network[];\n  readonly externalContractAddresses = new Map<string, { [key: number]: string }>();\n\n  constructor(defaultChainId?: number) {\n    super();\n    this.supportedNetworks = SupportedNetworks\n      .map((chainId) => {\n        const name = CHAIN_ID_TO_NETWORK_NAME[chainId];\n        return !name\n          ? null\n          : {\n              chainId,\n              name,\n            };\n      })\n      .filter((value) => !!value);\n\n    if (!this.supportedNetworks.length) {\n      throw new Exception('Invalid network config');\n    }\n\n    this.defaultNetwork = defaultChainId\n      ? this.supportedNetworks.find(({ chainId }) => chainId === defaultChainId)\n      : this.supportedNetworks[0];\n\n    if (!this.defaultNetwork) {\n      this.defaultNetwork = this.supportedNetworks.find(({ chainId }) => chainId === 1)\n    }\n\n    this.chainId$ = this.network$.observeKey('chainId');\n  }\n\n  get network(): Network {\n    return this.network$.value;\n  }\n\n  get chainId(): number {\n    return this.network ? this.network.chainId : null;\n  }\n\n  useDefaultNetwork(): void {\n    this.network$.next(this.defaultNetwork);\n  }\n\n  switchNetwork(networkName: NetworkNames): void {\n    this.network$.next(this.supportedNetworks.find(({ name }) => name === networkName) || null);\n  }\n\n  isNetworkSupported(chainId: number): boolean {\n    return SupportedNetworks.includes(chainId);\n  }\n\n  getNetworkConfig(chainId: number): NetworkConfig {\n    const networkConfig = Networks[chainId];\n    if (!networkConfig) {\n      throw new Error(`No network config found for network '${chainId}'`);\n    }\n    return networkConfig;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAMO,IAAM,iBAAN,cAA6B,QAAQ;AAAA,EAO1C,YAAY,gBAAyB;AACnC,UAAM;AAPR,SAAS,WAAW,IAAI,cAAuB,IAAI;AAInD,SAAS,4BAA4B,oBAAI,IAAuC;AAI9E,SAAK,oBAAoB,kBACtB,IAAI,CAAC,YAAY;AAChB,YAAM,OAAO,yBAAyB,OAAO;AAC7C,aAAO,CAAC,OACJ,OACA;AAAA,QACE;AAAA,QACA;AAAA,MACF;AAAA,IACN,CAAC,EACA,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK;AAE5B,QAAI,CAAC,KAAK,kBAAkB,QAAQ;AAClC,YAAM,IAAI,UAAU,wBAAwB;AAAA,IAC9C;AAEA,SAAK,iBAAiB,iBAClB,KAAK,kBAAkB,KAAK,CAAC,EAAE,QAAQ,MAAM,YAAY,cAAc,IACvE,KAAK,kBAAkB,CAAC;AAE5B,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,iBAAiB,KAAK,kBAAkB,KAAK,CAAC,EAAE,QAAQ,MAAM,YAAY,CAAC;AAAA,IAClF;AAEA,SAAK,WAAW,KAAK,SAAS,WAAW,SAAS;AAAA,EACpD;AAAA,EAEA,IAAI,UAAmB;AACrB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,IAAI,UAAkB;AACpB,WAAO,KAAK,UAAU,KAAK,QAAQ,UAAU;AAAA,EAC/C;AAAA,EAEA,oBAA0B;AACxB,SAAK,SAAS,KAAK,KAAK,cAAc;AAAA,EACxC;AAAA,EAEA,cAAc,aAAiC;AAC7C,SAAK,SAAS,KAAK,KAAK,kBAAkB,KAAK,CAAC,EAAE,KAAK,MAAM,SAAS,WAAW,KAAK,IAAI;AAAA,EAC5F;AAAA,EAEA,mBAAmB,SAA0B;AAC3C,WAAO,kBAAkB,SAAS,OAAO;AAAA,EAC3C;AAAA,EAEA,iBAAiB,SAAgC;AAC/C,UAAM,gBAAgB,SAAS,OAAO;AACtC,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM,wCAAwC,OAAO,GAAG;AAAA,IACpE;AACA,WAAO;AAAA,EACT;AACF;","names":[]}