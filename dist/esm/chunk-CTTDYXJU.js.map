{"version":3,"sources":["../../src/sdk/SessionKeyValidator/SessionKeyValidator.ts"],"sourcesContent":["import { ModularSdk } from \"../sdk.js\";\nimport { KeyStore, PERMISSIONS_URL } from \"./constants.js\";\nimport { SessionKeyResponse, GenerateSessionKeyResponse, GetNonceResponse, GetSessionKeyResponse, DeleteSessionKeyResponse, SessionData } from \"./interfaces.js\";\nimport { DEFAULT_ERC20_SESSION_KEY_VALIDATOR_ADDRESS, Networks } from \"../network/constants.js\";\nimport { encodeFunctionData, Hex, parseAbi, PublicClient } from \"viem\";\nimport { erc20Abi, sessionKeyValidatorAbi } from \"../common/abis.js\";\nimport { MODULE_TYPE, deepHexlify, resolveProperties, UserOperation } from \"../common/index.js\";\n\n\nexport class SessionKeyValidator {\n    private modularSdk: ModularSdk;\n    private providerURL: string;\n    private erc20SessionKeyValidator?: string;\n    private chainId?: number;\n    private publicClient: PublicClient;\n\n    private constructor(modularSdk: ModularSdk) {\n        this.modularSdk = modularSdk;\n        this.publicClient = modularSdk.getPublicClient();\n        this.providerURL = modularSdk.getProviderUrl();\n    }\n\n    static async create(modularSdk: ModularSdk) {\n        const sessionKeyValidator = new SessionKeyValidator(modularSdk);\n        await sessionKeyValidator.initialize(modularSdk);\n        return sessionKeyValidator;\n    }\n\n    private async initialize(modularSdk: ModularSdk): Promise<void> {\n        const erc20SessionKeyValidator = await this.getERC20SessionKeyValidator();\n        const installed = await modularSdk.isModuleInstalled(MODULE_TYPE.VALIDATOR, erc20SessionKeyValidator);\n        if(!installed) {\n            throw new Error(`Module: ${erc20SessionKeyValidator} not installed, cannot initialize session key validator`);\n        }\n    }\n\n    async enableSessionKey(\n        token: string,\n        functionSelector: string,\n        spendingLimit: string,\n        validAfter: number,\n        validUntil: number,\n        keyStore?: KeyStore,\n    ): Promise<SessionKeyResponse> {\n        try {\n            const etherspotWalletAddress = await this.modularSdk.getCounterFactualAddress();\n            const chainId = await this.getChainId();\n            const erc20SessionKeyValidatorAddress = await this.getERC20SessionKeyValidator();\n            const apiKeyMatch = this.providerURL.match(/api-key=([^&]+)/);\n            const apiKey = apiKeyMatch ? apiKeyMatch[1] : null;\n\n            if (erc20SessionKeyValidatorAddress == null) {\n                throw new Error('ERC20SessionKeyValidator contract address is required');\n            }\n\n            if (etherspotWalletAddress == null) {\n                throw new Error('etherspotWalletAddress is required');\n            }\n\n            if (apiKey == null) {\n                throw new Error('API Key is required');\n            }\n\n            if (!token || token == null || token == '') {\n                throw new Error('Token is required');\n            }\n\n            if (!functionSelector || functionSelector == null || functionSelector == '') {\n                throw new Error('Function Selector is required');\n            }\n\n            const isAValidTokenIndicator = await this.isAValidToken(token);\n\n            if (!isAValidTokenIndicator) {\n                throw new Error(`Token: ${token} does not exist or is invalid`);\n            }\n\n            const data = await this.generateSessionKeyData(\n                etherspotWalletAddress,\n                chainId,\n                token,\n                functionSelector,\n                spendingLimit,\n                validAfter,\n                validUntil,\n                apiKey,\n                false,\n                keyStore ? keyStore : null,\n            )\n\n            const enableSessionKeyData = encodeFunctionData({\n                functionName: 'enableSessionKey',\n                abi: parseAbi(sessionKeyValidatorAbi),\n                args: [data.enableSessionKeyData],\n            });\n\n            this.modularSdk.clearUserOpsFromBatch();\n\n            await this.modularSdk.addUserOpsToBatch({ to: erc20SessionKeyValidatorAddress, data: enableSessionKeyData });\n\n            try {\n                const op = await this.modularSdk.estimate();\n                const uoHash = await this.modularSdk.send(op)\n                if (!uoHash) await this.deleteSessionKey(etherspotWalletAddress, chainId, apiKey, data.sessionKey);\n\n                return {\n                    userOpHash: uoHash,\n                    sessionKey: data.sessionKey,\n                }\n            } catch (error) {\n                await this.deleteSessionKey(etherspotWalletAddress, chainId, apiKey, data.sessionKey);\n                throw error;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n\n    async rotateSessionKey(\n        token: string,\n        functionSelector: string,\n        spendingLimit: string,\n        validAfter: number,\n        validUntil: number,\n        oldSessionKey: string,\n        keyStore?: KeyStore,\n    ): Promise<SessionKeyResponse> {\n        try {\n            const account = await this.modularSdk.getCounterFactualAddress();\n            const chainId = await this.getChainId();\n            const erc20SessionKeyValidatorAddress = await this.getERC20SessionKeyValidator();\n            const apiKeyMatch = this.providerURL.match(/api-key=([^&]+)/);\n            const apiKey = apiKeyMatch ? apiKeyMatch[1] : null;\n\n            const isAValidTokenIndicator = await this.isAValidToken(token);\n\n            if (!isAValidTokenIndicator) {\n                throw new Error(`Token: ${token} is does not exist or is invalid`);\n            }\n\n            const data = await this.generateSessionKeyData(\n                account,\n                chainId,\n                token,\n                functionSelector,\n                spendingLimit,\n                validAfter,\n                validUntil,\n                apiKey,\n                true,\n                keyStore ? keyStore : null,\n                oldSessionKey,\n            )\n\n            const rotateSessionKeyData = encodeFunctionData({\n                functionName: 'rotateSessionKey',\n                abi: parseAbi(sessionKeyValidatorAbi),\n                args: [data.oldSessionKey, data.enableSessionKeyData],\n            });\n\n            this.modularSdk.clearUserOpsFromBatch();\n\n            await this.modularSdk.addUserOpsToBatch({ to: erc20SessionKeyValidatorAddress, data: rotateSessionKeyData });\n\n            try {\n                const op = await this.modularSdk.estimate();\n\n                const uoHash = await this.modularSdk.send(op);\n\n                if (uoHash) {\n                    await this.deleteSessionKey(account, chainId, apiKey, data.oldSessionKey);\n                }\n                else {\n                    await this.deleteSessionKey(account, chainId, apiKey, data.sessionKey);\n                }\n\n                return {\n                    userOpHash: uoHash,\n                    sessionKey: data.sessionKey,\n                }\n            } catch (error) {\n                await this.deleteSessionKey(account, chainId, apiKey, data.sessionKey);\n                throw error;\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async disableSessionKey(sessionKey: string): Promise<SessionKeyResponse> {\n        try {\n            const account = await this.modularSdk.getCounterFactualAddress();\n            const erc20SessionKeyValidator = await this.getERC20SessionKeyValidator();\n            const chainId = await this.getChainId();\n            const apiKeyMatch = this.providerURL.match(/api-key=([^&]+)/);\n            const apiKey = apiKeyMatch ? apiKeyMatch[1] : null;\n\n            const getSessionKeyData = await this.getSessionKey(\n                account,\n                chainId,\n                apiKey,\n                sessionKey,\n            )\n\n            const disableSessionKeyData = encodeFunctionData({\n                functionName: 'disableSessionKey',\n                abi: parseAbi(sessionKeyValidatorAbi),\n                args: [getSessionKeyData.sessionKey],\n            });\n\n            this.modularSdk.clearUserOpsFromBatch();\n\n            await this.modularSdk.addUserOpsToBatch({ to: erc20SessionKeyValidator, data: disableSessionKeyData });\n\n            const op = await this.modularSdk.estimate();\n\n            const uoHash = await this.modularSdk.send(op);\n\n            if (uoHash) {\n                await this.deleteSessionKey(account, chainId, apiKey, sessionKey);\n            }\n\n            return {\n                userOpHash: uoHash,\n                sessionKey: getSessionKeyData.sessionKey,\n            }\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async getNonce(sessionKey: string): Promise<GetNonceResponse> {\n        try {\n            const account = await this.modularSdk.getCounterFactualAddress();\n            const chainId = await this.getChainId();\n            const apiKeyMatch = this.providerURL.match(/api-key=([^&]+)/);\n            const apiKey = apiKeyMatch ? apiKeyMatch[1] : null;\n\n            const data = await this.getNonceData(\n                account,\n                chainId,\n                apiKey,\n                sessionKey\n            )\n\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async getAssociatedSessionKeys(): Promise<string[]> {\n        const account = await this.modularSdk.getCounterFactualAddress();\n\n        const erc20SessionKeyValidator = await this.getERC20SessionKeyValidator();\n\n        const response = await this.publicClient.simulateContract({\n            account: account as Hex,\n            address: erc20SessionKeyValidator as Hex,\n            abi: parseAbi(sessionKeyValidatorAbi),\n            functionName: 'getAssociatedSessionKeys',\n            args: []\n        });\n\n        return response.result as string[];\n    }\n\n    async sessionData(sessionKey: string): Promise<SessionData> {\n        const account = await this.modularSdk.getCounterFactualAddress();\n\n        const erc20SessionKeyValidatorAddress = await this.getERC20SessionKeyValidator();\n\n        const data = await this.publicClient.simulateContract({\n            account: account as Hex,\n            address: erc20SessionKeyValidatorAddress as Hex,\n            abi: parseAbi(sessionKeyValidatorAbi),\n            functionName: 'sessionData',\n            args: [sessionKey, account]\n        });\n\n        if(!data.result  || data.result == null) {\n            throw new Error('Session data not found');\n        }\n\n        const { token, funcSelector, spendingLimit, validAfter, validUntil, live } = data.result;\n\n        return {\n            token,\n            funcSelector,\n            spendingLimit,\n            validAfter,\n            validUntil,\n            live\n        }\n    }\n\n    private async getERC20SessionKeyValidator(): Promise<string> {\n        if (this.erc20SessionKeyValidator) {\n            return this.erc20SessionKeyValidator;\n        }\n\n        const chainId = await this.getChainId();\n        this.erc20SessionKeyValidator = Networks[chainId]?.contracts?.erc20SessionKeyValidator || DEFAULT_ERC20_SESSION_KEY_VALIDATOR_ADDRESS;\n\n        return this.erc20SessionKeyValidator;\n    }\n\n    private async getChainId(): Promise<number> {\n        if (!this.chainId) {\n            this.chainId = this.publicClient.chain.id;\n        }\n        return this.chainId;\n    }\n\n    private async generateSessionKeyData(\n        account: string,\n        chainId: number,\n        token: string,\n        functionSelector: string,\n        spendingLimit: string,\n        validAfter: number,\n        validUntil: number,\n        apiKey: string,\n        rotateKey: boolean,\n        keyStore: KeyStore,\n        oldSessionKey?: string,\n    ): Promise<GenerateSessionKeyResponse> {\n        let response = null;\n        try {\n            if (!apiKey || apiKey == null) {\n                throw new Error('API Key is required');\n            }\n\n            const url = `${PERMISSIONS_URL}/account/generateSessionKeyData?apiKey=${apiKey}`;\n\n            if (account == null) {\n                throw new Error('Account is required');\n            }\n\n\n            const now = Math.floor(Date.now() / 1000);\n\n            if (validAfter < now + 29) {\n                throw new Error('validAfter must be greater than current time by at least 30 seconds');\n            }\n\n            if (validUntil == 0 || validUntil < validAfter || validUntil < now) {\n                throw new Error('validUntil must be greater than validAfter and current time');\n            }\n\n            if (!token || token == null || token == '') {\n                throw new Error('Token is required');\n            }\n\n            if (!functionSelector || functionSelector == null || functionSelector == '') {\n                throw new Error('Function Selector is required');\n            }\n\n            if (!spendingLimit || spendingLimit == null || spendingLimit == '') {\n                throw new Error('Spending Limit is required');\n            }\n\n            const requestBody = {\n                account,\n                chainId,\n                rotateKey,\n                keyStore,\n                token,\n                functionSelector,\n                spendingLimit,\n                validAfter,\n                validUntil,\n                oldSessionKey,\n            };\n\n            response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(requestBody),\n            });\n\n            if (response.status === 200) {\n                const responseJson: GenerateSessionKeyResponse = await response.json();\n                return responseJson\n            } else {\n                const responseJson = await response.json();\n                throw new Error(responseJson.message)\n            }\n        } catch (err) {\n            throw new Error(err.message)\n        }\n    }\n\n    private async getSessionKey(\n        account: string,\n        chainId: number,\n        apiKey: string,\n        sessionKey: string,\n    ): Promise<GetSessionKeyResponse> {\n        let response = null;\n\n        try {\n            let url = `${PERMISSIONS_URL}/account/getSessionKey?account=${account}&chainId=${chainId}&sessionKey=${sessionKey}`;\n            if (apiKey) url += `&apiKey=${apiKey}`;\n\n            response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (response.status === 200) {\n                const responseJson: GetSessionKeyResponse = await response.json();\n                return responseJson\n            } else {\n                const responseJson = await response.json();\n                throw new Error(responseJson.message)\n            }\n        } catch (err) {\n            throw new Error(err.message)\n        }\n    }\n\n    private async deleteSessionKey(\n        account: string,\n        chainId: number,\n        apiKey: string,\n        sessionKey: string,\n    ): Promise<DeleteSessionKeyResponse> {\n        let response = null;\n        try {\n            let url = `${PERMISSIONS_URL}/account/deleteSessionKey?account=${account}&chainId=${chainId}&sessionKey=${sessionKey}`;\n            if (apiKey) url += `&apiKey=${apiKey}`;\n\n            response = await fetch(url, {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (response.status === 200) {\n                const responseJson: DeleteSessionKeyResponse = await response.json();\n                return responseJson\n            } else {\n                const responseJson = await response.json();\n                throw new Error(responseJson.message)\n            }\n        } catch (err) {\n            throw new Error(err.message)\n        }\n    }\n\n    private async getSignUserOp(\n        account: string,\n        chainId: number,\n        apiKey: string,\n        sessionKey: string,\n        userOp: UserOperation,\n    ): Promise<UserOperation> {\n        let response = null;\n\n        try {\n            let url = `${PERMISSIONS_URL}/account/signUserOp?account=${account}&chainId=${chainId}&sessionKey=${sessionKey}`;\n            if (apiKey) url += `&apiKey=${apiKey}`;\n\n            response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(deepHexlify(await resolveProperties(userOp))),\n            });\n\n            if (response.status === 200) {\n                const responseJson = await response.json();\n                return responseJson\n            } else {\n                const responseJson = await response.json();\n                throw new Error(responseJson.message)\n            }\n        } catch (err) {\n            throw new Error(err.message)\n        }\n    }\n\n    private async getNonceData(\n        account: string,\n        chainId: number,\n        apiKey: string,\n        sessionKey: string,\n    ): Promise<GetNonceResponse> {\n        let response = null;\n\n        try {\n            let url = `${PERMISSIONS_URL}/account/getNonce?account=${account}&chainId=${chainId}&sessionKey=${sessionKey}`;\n            if (apiKey) url += `&apiKey=${apiKey}`;\n\n            response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (response.status === 200) {\n                const responseJson: GetNonceResponse = await response.json();\n                return responseJson\n            } else {\n                const responseJson = await response.json();\n                throw new Error(responseJson.message)\n            }\n        } catch (err) {\n            throw new Error(err.message)\n        }\n    }\n\n    async signUserOpWithSessionKey(sessionKey: string, userOp: UserOperation): Promise<UserOperation> {\n        try {\n            const account = await this.modularSdk.getCounterFactualAddress();\n            const chainId = await this.getChainId();\n            const apiKeyMatch = this.providerURL.match(/api-key=([^&]+)/);\n            const apiKey = apiKeyMatch ? apiKeyMatch[1] : null;\n\n            const data: UserOperation = await this.getSignUserOp(\n                account,\n                chainId,\n                apiKey,\n                sessionKey,\n                userOp,\n            )\n\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async isAValidToken(token: string): Promise<boolean> {\n\n        let decimals = null;\n\n        try {\n            decimals = await this.publicClient.readContract({\n                address: token as Hex,\n                abi: parseAbi(erc20Abi),\n                functionName: 'decimals',\n                args: []\n            });\n        } catch (error) {\n            console.error(`Token: ${token} is does not exist or is invalid`);\n            return false;\n        }\n\n        if (!decimals || decimals == null || decimals as number == 0) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"],"mappings":"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","names":[]}