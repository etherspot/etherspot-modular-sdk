{"version":3,"sources":["../../src/sdk/common/utils/viem-utils.ts"],"sourcesContent":["import { PublicClient, Address, createPublicClient, createWalletClient, http, Account, Chain, getAddress, extractChain, Hex, Transport } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts';\nimport * as chains from \"viem/chains\";\nimport { Networks } from '../../network/constants.js';\nimport { AddressZero } from '../constants.js';\n\nexport const isContract = async ({\n  client,\n  address,\n}: {\n  client: PublicClient\n  address: Address\n}) => {\n  const bytecode = await client.getBytecode({\n    address: address,\n  })\n  return bytecode && bytecode !== '0x'\n}\n\n\nexport const getPublicClient = ({ chainId, transport }: { chainId: number, transport: Transport }) => {\n  const publicClient = createPublicClient({\n    chain: Networks[chainId].chain,\n    transport: transport\n  });\n  return publicClient;\n}\n\nexport const getWalletClientFromPrivateKey = ({ rpcUrl, chainId, privateKey }: { rpcUrl: string, chainId: number, privateKey: string }): ReturnType<typeof createWalletClient> => {\n  return createWalletClient({\n    account: privateKeyToAccount(privateKey as Hex),\n    chain: Networks[chainId].chain,\n    transport: http(rpcUrl) as any, // Asserting to `any` to bypass the deep instantiation check\n  });\n}\n\nexport const getWalletClientFromAccount = ({ rpcUrl, chainId, account }: { rpcUrl: string, chainId: number, account: Account }): ReturnType<typeof createWalletClient> => {\n  return createWalletClient({\n    account: account,\n    chain: Networks[chainId].chain,\n    transport: http(rpcUrl) as any, // Asserting to `any` to bypass the deep instantiation check\n  });\n}\nexport const getViemAccount = (privateKey: string): Account => {\n  return privateKeyToAccount(privateKey as Hex);\n}\n\nexport const getViemAddress = (address: string): Address => {\n  return getAddress(address);\n}\n\n/**\n * Utility method for converting a chainId to a {@link Chain} object\n *\n * @param chainId\n * @returns a {@link Chain} object for the given chainId\n * @throws if the chainId is not found\n */\nexport const getChain = (chainId: number) : Chain => {\n  return extractChain({\n    chains: Object.values(chains) as Chain[],\n    id: chainId,\n  });\n}\n\nexport function prepareAddress(value: string, zeroAddressAsNull = false): string {\n  let result: string = null;\n\n  try {\n    result = getAddress(value);\n\n    if (result === AddressZero) {\n      result = null;\n    }\n  } catch (err) {\n    //\n  }\n\n  if (!result && zeroAddressAsNull) {\n    result = AddressZero;\n  }\n\n  return result;\n}\n\nexport function prepareAddresses<T extends {}>(data: T, ...keys: (keyof T)[]): T {\n  const result = {\n    ...data,\n  };\n\n  for (const key of keys) {\n    if (!result[key]) {\n      continue;\n    }\n\n    try {\n      if (Array.isArray(result[key])) {\n        const addresses: any = ((result[key] as any) as string[]).map((item) => {\n          let result = item;\n\n          if (item) {\n            const address = prepareAddress(item);\n\n            if (address) {\n              result = address;\n            }\n          }\n\n          return result;\n        });\n\n        result[key] = addresses;\n      } else {\n        const address: any = prepareAddress(result[key] as any);\n\n        if (address) {\n          result[key] = address;\n        }\n      }\n    } catch (err) {\n      //\n    }\n  }\n\n  return result;\n}\n\nexport function addressesEqual(address1: string, address2: string): boolean {\n  return (address1 || '').toLowerCase() === (address2 || '').toLowerCase();\n}\n\nexport function isAddress(value: string): boolean {\n  let result = false;\n\n  if (value && value !== AddressZero) {\n    try {\n      const address = getAddress(value);\n\n      if (address) {\n        result = address === value;\n      }\n    } catch (err) {\n      result = false;\n    }\n  } else if (value === AddressZero) {\n    result = true;\n  }\n\n  return result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAMO,IAAM,aAAa,OAAO;AAAA,EAC/B;AAAA,EACA;AACF,MAGM;AACJ,QAAM,WAAW,MAAM,OAAO,YAAY;AAAA,IACxC;AAAA,EACF,CAAC;AACD,SAAO,YAAY,aAAa;AAClC;AAGO,IAAM,kBAAkB,CAAC,EAAE,SAAS,UAAU,MAAiD;AACpG,QAAM,eAAe,mBAAmB;AAAA,IACtC,OAAO,SAAS,OAAO,EAAE;AAAA,IACzB;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAEO,IAAM,gCAAgC,CAAC,EAAE,QAAQ,SAAS,WAAW,MAAsG;AAChL,SAAO,mBAAmB;AAAA,IACxB,SAAS,oBAAoB,UAAiB;AAAA,IAC9C,OAAO,SAAS,OAAO,EAAE;AAAA,IACzB,WAAW,KAAK,MAAM;AAAA;AAAA,EACxB,CAAC;AACH;AAEO,IAAM,6BAA6B,CAAC,EAAE,QAAQ,SAAS,QAAQ,MAAoG;AACxK,SAAO,mBAAmB;AAAA,IACxB;AAAA,IACA,OAAO,SAAS,OAAO,EAAE;AAAA,IACzB,WAAW,KAAK,MAAM;AAAA;AAAA,EACxB,CAAC;AACH;AACO,IAAM,iBAAiB,CAAC,eAAgC;AAC7D,SAAO,oBAAoB,UAAiB;AAC9C;AAEO,IAAM,iBAAiB,CAAC,YAA6B;AAC1D,SAAO,WAAW,OAAO;AAC3B;AASO,IAAM,WAAW,CAAC,YAA4B;AACnD,SAAO,aAAa;AAAA,IAClB,QAAQ,OAAO,OAAO,cAAM;AAAA,IAC5B,IAAI;AAAA,EACN,CAAC;AACH;AAEO,SAAS,eAAe,OAAe,oBAAoB,OAAe;AAC/E,MAAI,SAAiB;AAErB,MAAI;AACF,aAAS,WAAW,KAAK;AAEzB,QAAI,WAAW,aAAa;AAC1B,eAAS;AAAA,IACX;AAAA,EACF,SAAS,KAAK;AAAA,EAEd;AAEA,MAAI,CAAC,UAAU,mBAAmB;AAChC,aAAS;AAAA,EACX;AAEA,SAAO;AACT;AAEO,SAAS,iBAA+B,SAAY,MAAsB;AAC/E,QAAM,SAAS;AAAA,IACb,GAAG;AAAA,EACL;AAEA,aAAW,OAAO,MAAM;AACtB,QAAI,CAAC,OAAO,GAAG,GAAG;AAChB;AAAA,IACF;AAEA,QAAI;AACF,UAAI,MAAM,QAAQ,OAAO,GAAG,CAAC,GAAG;AAC9B,cAAM,YAAmB,OAAO,GAAG,EAAuB,IAAI,CAAC,SAAS;AACtE,cAAIA,UAAS;AAEb,cAAI,MAAM;AACR,kBAAM,UAAU,eAAe,IAAI;AAEnC,gBAAI,SAAS;AACX,cAAAA,UAAS;AAAA,YACX;AAAA,UACF;AAEA,iBAAOA;AAAA,QACT,CAAC;AAED,eAAO,GAAG,IAAI;AAAA,MAChB,OAAO;AACL,cAAM,UAAe,eAAe,OAAO,GAAG,CAAQ;AAEtD,YAAI,SAAS;AACX,iBAAO,GAAG,IAAI;AAAA,QAChB;AAAA,MACF;AAAA,IACF,SAAS,KAAK;AAAA,IAEd;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,eAAe,UAAkB,UAA2B;AAC1E,UAAQ,YAAY,IAAI,YAAY,OAAO,YAAY,IAAI,YAAY;AACzE;AAEO,SAAS,UAAU,OAAwB;AAChD,MAAI,SAAS;AAEb,MAAI,SAAS,UAAU,aAAa;AAClC,QAAI;AACF,YAAM,UAAU,WAAW,KAAK;AAEhC,UAAI,SAAS;AACX,iBAAS,YAAY;AAAA,MACvB;AAAA,IACF,SAAS,KAAK;AACZ,eAAS;AAAA,IACX;AAAA,EACF,WAAW,UAAU,aAAa;AAChC,aAAS;AAAA,EACX;AAEA,SAAO;AACT;","names":["result"]}