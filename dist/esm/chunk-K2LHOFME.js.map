{"version":3,"sources":["../../src/sdk/base/DeterministicDeployer.ts"],"sourcesContent":["import { Account, concat, Hex, keccak256, pad, PublicClient, toHex, WalletClient } from 'viem'\nimport { BigNumber, BigNumberish } from '../types/bignumber.js'\n\nexport type TransactionRequest = {\n  to: Hex,\n  data: Hex,\n  gasLimit?: number\n}\n\n/**x\n * wrapper class for Arachnid's deterministic deployer\n * (deterministic deployer used by 'hardhat-deployer'. generates the same addresses as \"hardhat-deploy\")\n */\nexport class DeterministicDeployer {\n  /**\n   * return the address this code will get deployed to.\n   * @param ctrCode constructor code to pass to CREATE2\n   * @param salt optional salt. defaults to zero\n   */\n  static async getAddress(ctrCode: string, salt: BigNumberish = 0): Promise<string> {\n    return await DeterministicDeployer.instance.getDeterministicDeployAddress(ctrCode, salt)\n  }\n\n  /**\n   * deploy the contract, unless already deployed\n   * @param ctrCode constructor code to pass to CREATE2\n   * @param salt optional salt. defaults to zero\n   * @return the deployed address\n   */\n  static async deploy(ctrCode: string, salt: BigNumberish = 0): Promise<string> {\n    return await DeterministicDeployer.instance.deterministicDeploy(ctrCode, salt)\n  }\n\n  // from: https://github.com/Arachnid/deterministic-deployment-proxy\n  proxyAddress = '0x4e59b44847b379578588920ca78fbf26c0b4956c'\n  deploymentTransaction = '0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222'\n  deploymentSignerAddress = '0x3fab184622dc19b6109349b94811493bf2a45362'\n  deploymentGasPrice = 100e9\n  deploymentGasLimit = 100000\n\n  constructor(readonly walletClient: WalletClient, readonly account: Account, readonly publicClient: PublicClient) {\n  }\n\n  async isContractDeployed(address: Hex): Promise<boolean> {\n    return await this.publicClient.getCode({ address: address }).then(code => code.length > 2);\n  }\n\n  async isDeployerDeployed(): Promise<boolean> {\n    return await this.isContractDeployed(this.proxyAddress as Hex)\n  }\n\n  async deployDeployer(): Promise<void> {\n    if (await this.isContractDeployed(this.proxyAddress as Hex)) {\n      return\n    }\n    const bal: bigint = await this.publicClient.getBalance({ address: this.deploymentSignerAddress as Hex });\n    const balBig = BigNumber.from(bal);\n    const neededBalance = BigNumber.from(this.deploymentGasLimit).mul(this.deploymentGasPrice)\n\n    if (balBig.lt(neededBalance)) {\n\n      if (!this.account) {\n        throw new Error('no account to send from');\n      }\n\n      const tx = await this.walletClient.sendTransaction({\n        account: this.account,\n        chain: this.publicClient.chain,\n        to: this.deploymentSignerAddress as Hex,\n        value: neededBalance,\n        gasLimit: this.deploymentGasLimit,\n        kzg: undefined\n      });\n    }\n\n    await this.walletClient.sendRawTransaction(\n      { serializedTransaction: this.deploymentTransaction as Hex }\n    );\n\n    if (!await this.isContractDeployed(this.proxyAddress as Hex)) {\n      throw new Error('raw TX didn\\'t deploy deployer!')\n    }\n  }\n\n  async getDeployTransaction(ctrCode: string, salt: BigNumberish = 0): Promise<TransactionRequest> {\n    await this.deployDeployer()\n    const saltEncoded = pad(toHex(salt as Hex), { size: 32 })\n    return {\n      to: this.proxyAddress as Hex,\n      data: concat([\n        saltEncoded as Hex,\n        ctrCode as Hex])\n    }\n  }\n\n  async getDeterministicDeployAddress(ctrCode: string, salt: BigNumberish = 0): Promise<string> {\n    // this method works only before the contract is already deployed:\n    // return await this.provider.call(await this.getDeployTransaction(ctrCode, salt))\n    const saltEncoded = pad(toHex(salt as Hex), { size: 32 })\n\n    return '0x' + keccak256(concat([\n      '0xff',\n      this.proxyAddress as Hex,\n      saltEncoded as Hex,\n      keccak256(ctrCode as Hex) as Hex\n    ])).slice(-40)\n  }\n\n  async deterministicDeploy(ctrCode: string, salt: BigNumberish = 0): Promise<string> {\n    const addr = await this.getDeterministicDeployAddress(ctrCode, salt)\n    if (!await this.isContractDeployed(addr as Hex)) {\n\n      const transactionRequest = await this.getDeployTransaction(ctrCode, salt);\n\n      //await this.provider.getSigner().sendTransaction(transactionRequest)\n\n      await this.walletClient.sendTransaction({\n        account: this.account,\n        chain: this.publicClient.chain,\n        to: transactionRequest.to as Hex,\n        data: transactionRequest.data as Hex,\n        kzg: undefined\n      });\n\n    }\n    return addr\n  }\n\n  private static _instance?: DeterministicDeployer\n\n  static init(walletClient: WalletClient, account: Account, publicClient: PublicClient): void {\n    this._instance = new DeterministicDeployer(walletClient, account, publicClient)\n  }\n\n  static get instance(): DeterministicDeployer {\n    if (this._instance == null) {\n      throw new Error('must call \"DeterministicDeployer.init(walletClient, account, publicClient)\"')\n    }\n    return this._instance\n  }\n}\n"],"mappings":"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","names":[]}