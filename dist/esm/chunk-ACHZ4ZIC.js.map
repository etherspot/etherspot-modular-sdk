{"version":3,"sources":["../../src/sdk/common/getInstalledModules.ts"],"sourcesContent":["import { Address, PublicClient, parseAbi, zeroAddress } from 'viem'\nimport { ModuleType } from './types.js'\nimport { VIEM_SENTINEL_ADDRESS } from './constants.js'\nimport { isContract } from './utils/viem-utils.js'\nimport { accountAbi } from './abis.js'\nimport { DEFAULT_QUERY_PAGE_SIZE } from '../network/constants.js'\n\nexport const getInstalledModules = async ({\n  client,\n  moduleAddress,\n  moduleTypes = ['validator', 'executor', 'hook', 'fallback'],\n  pageSize = DEFAULT_QUERY_PAGE_SIZE\n}: {\n  client: PublicClient\n  moduleAddress: Address\n  moduleTypes?: ModuleType[]\n  pageSize: number\n}): Promise<Address[]> => {\n  const modules: Address[] = []\n  if (await isContract({ client, address: moduleAddress })) {\n    for (const moduleType of moduleTypes) {\n      switch (moduleType) {\n        case 'validator':\n          const validators = await getModulesPaginated({\n            client,\n            functionName: 'getValidatorPaginated',\n            walletAddress: moduleAddress,\n            pageSize: pageSize\n          })\n          validators && modules.push(...validators)\n          break\n        case 'executor':\n          const executors = await getModulesPaginated({\n            client,\n            functionName: 'getExecutorsPaginated',\n            walletAddress: moduleAddress,\n            pageSize: pageSize\n          })\n          executors && modules.push(...executors)\n          break\n        case 'hook':\n          const activeHook = (await client.readContract({\n            address: moduleAddress,\n            abi: parseAbi(accountAbi),\n            functionName: 'getActiveHook',\n          })) as Address\n          modules.push(activeHook)\n          break\n        case 'fallback':\n        // todo: implement on account or use events\n      }\n    }\n  } else {\n    throw new Error('Account has no init code and is not deployed')\n  }\n  const onlyModules = modules.filter((module) => module !== zeroAddress)\n  const uniqueModules = Array.from(new Set(onlyModules))\n  return uniqueModules\n}\n\nexport const getModulesPaginated = async ({\n  client,\n  functionName,\n  walletAddress,\n  pageSize = DEFAULT_QUERY_PAGE_SIZE\n}: {\n  client: PublicClient\n  functionName: string\n  walletAddress: Address\n  pageSize?: number\n}) => {\n  const data = (await client.readContract({\n    address: walletAddress,\n    abi: parseAbi(accountAbi),\n    functionName: functionName,\n    args: [VIEM_SENTINEL_ADDRESS, pageSize],\n  })) as [Address[], Address]\n  return data[0]\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAOO,IAAM,sBAAsB,OAAO;AAAA,EACxC;AAAA,EACA;AAAA,EACA,cAAc,CAAC,aAAa,YAAY,QAAQ,UAAU;AAAA,EAC1D,WAAW;AACb,MAK0B;AACxB,QAAM,UAAqB,CAAC;AAC5B,MAAI,MAAM,WAAW,EAAE,QAAQ,SAAS,cAAc,CAAC,GAAG;AACxD,eAAW,cAAc,aAAa;AACpC,cAAQ,YAAY;AAAA,QAClB,KAAK;AACH,gBAAM,aAAa,MAAM,oBAAoB;AAAA,YAC3C;AAAA,YACA,cAAc;AAAA,YACd,eAAe;AAAA,YACf;AAAA,UACF,CAAC;AACD,wBAAc,QAAQ,KAAK,GAAG,UAAU;AACxC;AAAA,QACF,KAAK;AACH,gBAAM,YAAY,MAAM,oBAAoB;AAAA,YAC1C;AAAA,YACA,cAAc;AAAA,YACd,eAAe;AAAA,YACf;AAAA,UACF,CAAC;AACD,uBAAa,QAAQ,KAAK,GAAG,SAAS;AACtC;AAAA,QACF,KAAK;AACH,gBAAM,aAAc,MAAM,OAAO,aAAa;AAAA,YAC5C,SAAS;AAAA,YACT,KAAK,SAAS,UAAU;AAAA,YACxB,cAAc;AAAA,UAChB,CAAC;AACD,kBAAQ,KAAK,UAAU;AACvB;AAAA,QACF,KAAK;AAAA,MAEP;AAAA,IACF;AAAA,EACF,OAAO;AACL,UAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AACA,QAAM,cAAc,QAAQ,OAAO,CAAC,WAAW,WAAW,WAAW;AACrE,QAAM,gBAAgB,MAAM,KAAK,IAAI,IAAI,WAAW,CAAC;AACrD,SAAO;AACT;AAEO,IAAM,sBAAsB,OAAO;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AACb,MAKM;AACJ,QAAM,OAAQ,MAAM,OAAO,aAAa;AAAA,IACtC,SAAS;AAAA,IACT,KAAK,SAAS,UAAU;AAAA,IACxB;AAAA,IACA,MAAM,CAAC,uBAAuB,QAAQ;AAAA,EACxC,CAAC;AACD,SAAO,KAAK,CAAC;AACf;","names":[]}