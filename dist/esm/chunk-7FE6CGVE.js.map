{"version":3,"sources":["../../src/sdk/wallet/providers/wallet-connect.wallet-provider.ts"],"sourcesContent":["import { Address, concat, encodeAbiParameters, Hash, hashMessage, Hex, parseAbiParameters, toBytes, toHex, TransactionRequest } from 'viem';\nimport { DynamicWalletProvider } from './dynamic.wallet-provider.js';\nimport { MessagePayload, WalletConnectConnector } from './interfaces.js';\n\nexport class WalletConnectWalletProvider extends DynamicWalletProvider {\n  static connect(connector: WalletConnectConnector): WalletConnectWalletProvider {\n    return new WalletConnectWalletProvider(connector);\n  }\n\n  protected constructor(readonly connector: WalletConnectConnector) {\n    super('WalletConnect');\n\n    try {\n      const {\n        accounts: [address],\n        chainId,\n      } = connector;\n\n      this.setAddress(address);\n      this.setNetworkName(chainId);\n    } catch (err) {\n      //\n    }\n\n    this.updateSessionHandler = this.updateSessionHandler.bind(this);\n\n    connector.on('connect', this.updateSessionHandler);\n    connector.on('session_update', this.updateSessionHandler);\n    connector.on('disconnect', () => {\n      this.setAddress(null);\n      this.setNetworkName(null);\n    });\n  }\n\n  async signMessage(message: Hex, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const msg = toBytes(hashMessage({raw: toBytes(message)}))\n    const response: Hex = await this.connector.signPersonalMessage([\n      msg, //\n      this.address,\n    ]);\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, response])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n\n    return typeof response === 'string' ? validatorAddress + response.slice(2) : null;\n  }\n\n  async signUserOp(message: Hex): Promise<string> {\n    return this.connector.signPersonalMessage([\n      toHex(message), //\n      this.address,\n    ]);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signTypedData(msg: MessagePayload, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const signature: Hex = await this.connector.request({\n      method: 'eth_signTypedData_v4',\n      params: [\n        this.address,\n        msg\n      ]\n    })\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return typeof signature === 'string' ? validatorAddress + signature.slice(2) : null;\n  }\n\n  async eth_requestAccounts(): Promise<string[]> {\n    return [this.address];\n  }\n\n  async eth_accounts(): Promise<string[]> {\n    return [this.address];\n  }\n\n  async eth_sendTransaction(transaction: TransactionRequest): Promise<Hash> {\n    return this.connector.request({method: 'eth_sendTransaction', params: [\n      transaction\n    ]});\n  }\n\n  async eth_signTransaction(transaction: TransactionRequest): Promise<string> {\n    return this.connector.request({method: 'eth_signTransaction', params: [\n      transaction\n    ]});\n  }\n\n  protected updateSessionHandler(error: Error, payload: { params: { accounts: string[]; chainId: number } }): void {\n    let address: string = null;\n    let chainId: number = null;\n\n    if (!error) {\n      try {\n        ({\n          accounts: [address],\n          chainId,\n        } = payload.params[0]);\n      } catch (err) {\n        address = null;\n        chainId = null;\n      }\n    }\n\n    this.setAddress(address);\n    this.setNetworkName(chainId);\n  }\n}\n"],"mappings":"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","names":[]}