{"version":3,"sources":["../../src/sdk/wallet/providers/web3eip1193.wallet-provider.ts"],"sourcesContent":["import { prepareAddress } from '../../common/index.js';\nimport { NetworkNames, prepareNetworkName } from '../../network/index.js';\nimport { MessagePayload, Web3eip1193Provider } from './interfaces.js';\nimport { DynamicWalletProvider } from './dynamic.wallet-provider.js';\nimport { hashMessage, Hex, toBytes, toHex, Hash, TransactionRequest, encodeAbiParameters, parseAbiParameters, concat, Address } from 'viem';\n\nexport class Web3eip1193WalletProvider extends DynamicWalletProvider {\n  static async connect(provider: Web3eip1193Provider, type = 'Web3'): Promise<Web3eip1193WalletProvider> {\n    const result = new Web3eip1193WalletProvider(provider, type);\n    const connected = await result.refresh();\n    return connected ? result : null;\n  }\n\n  constructor(readonly web3: Web3eip1193Provider, type = 'Web3') {\n    super(type);\n  }\n\n  get address(): string {\n    return this.address$.value;\n  }\n\n  get networkName(): NetworkNames {\n    return this.networkName$.value;\n  }\n\n  async refresh(): Promise<boolean> {\n    let result = false;\n    const chainId = await this.sendRequest<string>('eth_chainId');\n    const networkName = prepareNetworkName(chainId);\n\n    if (networkName) {\n      const accounts = await this.sendRequest<string[]>('eth_accounts');\n\n      if (Array.isArray(accounts) && accounts.length) {\n        const address = prepareAddress(accounts[0]);\n\n        if (address) {\n          this.setAddress(address);\n          this.setNetworkName(networkName);\n\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  async signMessage(message: Hex, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const msg = toBytes(hashMessage({raw: toBytes(message)}))\n    const signature: Hex = await this.sendRequest('personal_sign', [msg, this.address]);\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return validatorAddress + signature.slice(2)\n  }\n\n  async signUserOp(message: Hex): Promise<string> {\n    return this.sendRequest('personal_sign', [toHex(message), this.address]);\n  }\n\n  async signTypedData(msg: MessagePayload, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const signature: Hex = await this.sendRequest('eth_signTypedData', [\n      this.address,\n      msg\n    ])\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return validatorAddress + signature.slice(2);\n  }\n\n  async eth_requestAccounts(): Promise<string[]> {\n    return [this.address];\n  }\n\n  async eth_accounts(): Promise<string[]> {\n    return [this.address];\n  }\n\n  async eth_sendTransaction(transaction: TransactionRequest): Promise<Hash> {\n    return this.sendRequest('eth_sendTransaction', [\n      transaction\n    ]);\n  }\n\n  async eth_signTransaction(transaction: TransactionRequest): Promise<string> {\n    return this.sendRequest('eth_signTransaction', [\n      transaction\n    ]);\n  }\n\n  protected async sendRequest<T = any>(method: string, params: any[] = []): Promise<T> {\n    try {\n      const result = await this.web3.request({\n        method,\n        params,\n      });\n\n      return result || null;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n"],"mappings":"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","names":[]}