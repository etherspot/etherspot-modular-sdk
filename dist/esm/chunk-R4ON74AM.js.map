{"version":3,"sources":["../../src/sdk/wallet/providers/meta-mask.wallet-provider.ts"],"sourcesContent":["import { DynamicWalletProvider } from './dynamic.wallet-provider.js';\nimport { MessagePayload } from './interfaces.js';\nimport { TransactionRequest, Hex, toBytes, hashMessage, toHex, Hash, encodeAbiParameters, parseAbiParameters, concat, Address } from 'viem';\n\ndeclare const window: Window & {\n  ethereum: {\n    isMetaMask: boolean;\n    autoRefreshOnNetworkChange: boolean;\n    networkVersion: string;\n    selectedAddress: string;\n\n    enable(): Promise<string[]>;\n\n    on<T>(event: string, callback: (data: T) => any): void;\n\n    request<T = any>(args: { method: string; params?: any[] }): Promise<T>;\n  };\n};\n\nexport class MetaMaskWalletProvider extends DynamicWalletProvider {\n  static get ethereum(): typeof window['ethereum'] {\n    return this.detect() ? window.ethereum : null;\n  }\n\n  static detect(): boolean {\n    return !!window?.ethereum?.isMetaMask;\n  }\n\n  static async connect(): Promise<MetaMaskWalletProvider> {\n    if (!this.instance) {\n      if (!this.detect()) {\n        throw new Error('MetaMask not found');\n      }\n\n      this.instance = new MetaMaskWalletProvider();\n\n      await this.instance.connect();\n    }\n\n    if (!this.instance.address) {\n      throw new Error('Can not connect to MetaMask');\n    }\n\n    return this.instance;\n  }\n\n  private static instance: MetaMaskWalletProvider;\n\n  protected constructor() {\n    super('MetaMask');\n  }\n\n  async signMessage(message: Hex, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const msg = toBytes(hashMessage({raw: toBytes(message)}))\n    const signature: Hex = await this.sendRequest('personal_sign', [\n      msg,\n      this.address,\n    ]);\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return validatorAddress + signature.slice(2);\n  }\n\n  async signUserOp(message: Hex): Promise<string> {\n    return this.sendRequest('personal_sign', [\n      toHex(message),\n      this.address\n    ])\n  }\n\n  async signTypedData(msg: MessagePayload, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const signature: Hex = await this.sendRequest('eth_signTypedData_v4', [\n      this.address,\n      msg\n    ])\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return validatorAddress + signature.slice(2);\n  }\n\n  async eth_requestAccounts(address: string): Promise<string[]> {\n    return [address];\n  }\n\n  async eth_accounts(address: string): Promise<string[]> {\n    return [address];\n  }\n\n  async eth_sendTransaction(transaction: TransactionRequest): Promise<Hash> {\n    return this.sendRequest('eth_sendTransaction', [\n      transaction\n    ]);\n  }\n\n  async eth_signTransaction(transaction: TransactionRequest): Promise<string> {\n    return this.sendRequest('eth_signTransaction', [\n      transaction\n    ]);\n  }\n\n  protected async connect(): Promise<void> {\n    const { ethereum } = window;\n\n    ethereum.autoRefreshOnNetworkChange = false;\n    ethereum.on<string>('accountsChanged', ([address]) => this.setAddress(address));\n    ethereum.on<string>('chainChanged', () => {\n      window.location.reload();\n    });\n\n    try {\n      const chainId = await this.sendRequest<string>('eth_chainId');\n\n      this.setNetworkName(chainId);\n\n      const [address] = await this.sendRequest<string[]>('eth_requestAccounts');\n\n      this.setAddress(address);\n    } catch (err) {\n      //\n    }\n  }\n\n  protected async sendRequest<T = any>(method: string, params?: any): Promise<T> {\n    const { ethereum } = window;\n\n    return ethereum.request({\n      method,\n      params,\n    });\n  }\n}\n"],"mappings":"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","names":[]}