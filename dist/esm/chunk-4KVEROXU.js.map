{"version":3,"sources":["../../src/sdk/common/utils/userop-utils.ts"],"sourcesContent":["import { CALL_TYPE, EXEC_TYPE } from \"../constants.js\";\nimport { concat, pad } from \"viem\";\n\nexport type Result = { key: string, value: any };\n\nexport type Deferrable<T> = {\n  [K in keyof T]: T[K] | Promise<T[K]>;\n}\n\nexport const resolveProperties = async <T>(object: Readonly<Deferrable<T>>): Promise<T> => {\n    const promises: Array<Promise<Result>> = Object.keys(object).map((key) => {\n      const value = object[<keyof Deferrable<T>>key];\n      return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n    });\n\n    const results = await Promise.all(promises);\n\n    return results.reduce((accum, result) => {\n      accum[<keyof T>(result.key)] = result.value;\n      return accum;\n    }, <T>{});\n  }\n\n  export const getExecuteMode = ({\n    callType,\n    execType\n}: {\n    callType: CALL_TYPE\n    execType: EXEC_TYPE\n}): string => {\n    return concat([\n        callType, // 1 byte\n        execType, // 1 byte\n        \"0x00000000\", // 4 bytes\n        \"0x00000000\", // 4 bytes\n        pad(\"0x00000000\", {size: 22})\n    ]);\n}\n"],"mappings":";;;;;;AASO,IAAM,oBAAoB,OAAU,WAAgD;AACvF,QAAM,WAAmC,OAAO,KAAK,MAAM,EAAE,IAAI,CAAC,QAAQ;AACxE,UAAM,QAAQ,OAA4B,GAAG;AAC7C,WAAO,QAAQ,QAAQ,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,KAAU,OAAO,EAAE,EAAE;AAAA,EACpE,CAAC;AAED,QAAM,UAAU,MAAM,QAAQ,IAAI,QAAQ;AAE1C,SAAO,QAAQ,OAAO,CAAC,OAAO,WAAW;AACvC,UAAgB,OAAO,GAAI,IAAI,OAAO;AACtC,WAAO;AAAA,EACT,GAAM,CAAC,CAAC;AACV;AAEO,IAAM,iBAAiB,CAAC;AAAA,EAC7B;AAAA,EACA;AACJ,MAGc;AACV,SAAO,OAAO;AAAA,IACV;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA,IAAI,cAAc,EAAC,MAAM,GAAE,CAAC;AAAA,EAChC,CAAC;AACL;","names":[]}