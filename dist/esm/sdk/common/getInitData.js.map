{"version":3,"sources":["../../../../src/sdk/common/getInitData.ts"],"sourcesContent":["import {\n  Hex,\n  decodeAbiParameters,\n  decodeFunctionData,\n  parseAbi,\n  slice,\n} from 'viem'\nimport { InitialModules, Module } from './types.js'\nimport { bootstrapAbi, factoryAbi } from './abis.js'\n\nexport const getInitData = ({\n  initCode,\n}: {\n  initCode: Hex\n}): InitialModules => {\n  const { args: initCodeArgs } = decodeFunctionData({\n    abi: parseAbi(factoryAbi),\n    data: slice(initCode, 20),\n  })\n\n  if (initCodeArgs?.length !== 2) {\n    throw new Error('Invalid init code')\n  }\n\n  const initCallData = decodeAbiParameters(\n    [\n      { name: 'bootstrap', type: 'address' },\n      { name: 'initCallData', type: 'bytes' },\n    ],\n    initCodeArgs[1] as Hex,\n  )\n\n  const { args: initCallDataArgs } = decodeFunctionData({\n    abi: parseAbi(bootstrapAbi),\n    data: initCallData[1],\n  })\n\n  if (initCallDataArgs?.length !== 4) {\n    throw new Error('Invalid init code')\n  }\n\n  return {\n    validators: initCallDataArgs[0] as Module[],\n    executors: initCallDataArgs[1] as Module[],\n    hooks: [initCallDataArgs[2]] as Module[],\n    fallbacks: initCallDataArgs[3] as Module[],\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAUO,IAAM,cAAc,CAAC;AAAA,EAC1B;AACF,MAEsB;AACpB,QAAM,EAAE,MAAM,aAAa,IAAI,mBAAmB;AAAA,IAChD,KAAK,SAAS,UAAU;AAAA,IACxB,MAAM,MAAM,UAAU,EAAE;AAAA,EAC1B,CAAC;AAED,MAAI,cAAc,WAAW,GAAG;AAC9B,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AAEA,QAAM,eAAe;AAAA,IACnB;AAAA,MACE,EAAE,MAAM,aAAa,MAAM,UAAU;AAAA,MACrC,EAAE,MAAM,gBAAgB,MAAM,QAAQ;AAAA,IACxC;AAAA,IACA,aAAa,CAAC;AAAA,EAChB;AAEA,QAAM,EAAE,MAAM,iBAAiB,IAAI,mBAAmB;AAAA,IACpD,KAAK,SAAS,YAAY;AAAA,IAC1B,MAAM,aAAa,CAAC;AAAA,EACtB,CAAC;AAED,MAAI,kBAAkB,WAAW,GAAG;AAClC,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AAEA,SAAO;AAAA,IACL,YAAY,iBAAiB,CAAC;AAAA,IAC9B,WAAW,iBAAiB,CAAC;AAAA,IAC7B,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAAA,IAC3B,WAAW,iBAAiB,CAAC;AAAA,EAC/B;AACF;","names":[]}