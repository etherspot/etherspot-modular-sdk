import { ModularSdk } from '../sdk.js';
import { KeyStore } from './constants.js';
import { SessionKeyResponse, GetNonceResponse, SessionData } from './interfaces.js';
import { UserOperation } from '../common/ERC4337Utils.js';
import '../common/getGasFee.js';
import '../types/bignumber.js';
import 'viem';
import '../interfaces.js';
import '../bundler/interface.js';
import '../../interfaces-q-ZvJZS9.js';
import 'viem/chains';
import '../wallet/providers/interfaces.js';
import '@walletconnect/universal-provider';
import '../common/rxjs/unique.subject.js';
import 'rxjs';
import '../common/constants.js';
import '../common/interfaces.js';
import '../base/TransactionDetailsForUserOp.js';
import '../dto/sign-message.dto.js';
import '../common/types.js';
import '../base/EtherspotWalletAPI.js';
import '../base/BaseAccountAPI.js';
import '../../PaymasterAPI-Dj36ihyu.js';
import '../types/user-operation-types.js';
import '../../network.service-B7y3JNe3.js';
import '../common/rxjs/error.subject.js';
import '../common/rxjs/object.subject.js';
import '../wallet/interfaces.js';
import '../base/calcPreVerificationGas.js';

declare class SessionKeyValidator {
    private modularSdk;
    private providerURL;
    private erc20SessionKeyValidator?;
    private chainId?;
    private publicClient;
    private constructor();
    static create(modularSdk: ModularSdk): Promise<SessionKeyValidator>;
    private initialize;
    enableSessionKey(token: string, functionSelector: string, spendingLimit: string, validAfter: number, validUntil: number, keyStore?: KeyStore): Promise<SessionKeyResponse>;
    rotateSessionKey(token: string, functionSelector: string, spendingLimit: string, validAfter: number, validUntil: number, oldSessionKey: string, keyStore?: KeyStore): Promise<SessionKeyResponse>;
    disableSessionKey(sessionKey: string): Promise<SessionKeyResponse>;
    getNonce(sessionKey: string): Promise<GetNonceResponse>;
    getAssociatedSessionKeys(): Promise<string[]>;
    sessionData(sessionKey: string): Promise<SessionData>;
    private getERC20SessionKeyValidator;
    private getChainId;
    private generateSessionKeyData;
    private getSessionKey;
    private deleteSessionKey;
    private getSignUserOp;
    private getNonceData;
    signUserOpWithSessionKey(sessionKey: string, userOp: UserOperation): Promise<UserOperation>;
    isAValidToken(token: string): Promise<boolean>;
}

export { SessionKeyValidator };
