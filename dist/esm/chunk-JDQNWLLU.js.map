{"version":3,"sources":["../../src/sdk/wallet/providers/web3.wallet-provider.ts"],"sourcesContent":["import { prepareAddress } from '../../common/index.js';\nimport { NetworkNames, prepareNetworkName } from '../../network/index.js';\nimport { MessagePayload, Web3Provider } from './interfaces.js';\nimport { DynamicWalletProvider } from './dynamic.wallet-provider.js';\nimport { Address, concat, encodeAbiParameters, Hash, hashMessage, Hex, parseAbiParameters, toBytes, toHex, TransactionRequest } from 'viem';\n\nexport class Web3WalletProvider extends DynamicWalletProvider {\n  static async connect(provider: Web3Provider, type = 'Web3'): Promise<Web3WalletProvider> {\n    const result = new Web3WalletProvider(provider, type);\n    const connected = await result.refresh();\n    return connected ? result : null;\n  }\n\n  constructor(readonly web3: Web3Provider, type = 'Web3') {\n    super(type);\n  }\n\n  get address(): string {\n    return this.address$.value;\n  }\n\n  get networkName(): NetworkNames {\n    return this.networkName$.value;\n  }\n\n  async refresh(): Promise<boolean> {\n    let result = false;\n\n    const chainId = await this.sendRequest<string>('eth_chainId');\n    const networkName = prepareNetworkName(chainId);\n\n    if (networkName) {\n      const accounts = await this.sendRequest<string[]>('eth_accounts');\n\n      if (Array.isArray(accounts) && accounts.length) {\n        const address = prepareAddress(accounts[0]);\n\n        if (address) {\n          this.setAddress(address);\n          this.setNetworkName(networkName);\n\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  async signMessage(message: Hex, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const msg = toBytes(hashMessage({raw: toBytes(message)}))\n    const signature: Hex = await this.sendRequest(\n      'personal_sign',\n      [\n        msg,\n        this.address, //\n      ],\n      this.address,\n    );\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return validatorAddress + signature.slice(2);\n  }\n\n  async signUserOp(message: Hex): Promise<string> {\n    return this.sendRequest(\n      'personal_sign',\n      [\n        toHex(message),\n        this.address, //\n      ],\n      this.address,\n    );\n  }\n\n  async signTypedData(msg: MessagePayload, validatorAddress?: Address, factoryAddress?: Address, initCode?: Hex): Promise<string> {\n    const signature: Hex = await this.sendRequest('eth_signTypedData', [\n      this.address,\n      msg\n    ])\n    if (initCode !== '0x') {\n      const abiCoderResult = encodeAbiParameters(\n        parseAbiParameters('address, bytes, bytes'),\n        [factoryAddress, initCode, concat([validatorAddress, signature])]\n      )\n      return abiCoderResult + '6492649264926492649264926492649264926492649264926492649264926492'; //magicBytes\n    }\n    return validatorAddress + signature.slice(2);\n  }\n\n  async eth_requestAccounts(): Promise<string[]> {\n    return [this.address];\n  }\n\n  async eth_accounts(): Promise<string[]> {\n    return [this.address];\n  }\n\n  async eth_sendTransaction(transaction: TransactionRequest): Promise<Hash> {\n    return this.sendRequest('eth_sendTransaction', [\n      transaction\n    ]);\n  }\n\n  async eth_signTransaction(transaction: TransactionRequest): Promise<string> {\n    return this.sendRequest('eth_signTransaction', [\n      transaction\n    ]);\n  }\n\n  protected async sendRequest<T = any>(method: string, params: any[] = [], from?: string): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      const id = Date.now();\n\n      this.web3.send(\n        {\n          jsonrpc: '2.0',\n          method,\n          params,\n          id,\n          from,\n        },\n        (err: Error, response: { result: T }) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          let result: T;\n\n          try {\n            ({ result } = response);\n          } catch (err) {\n            result = null;\n          }\n\n          resolve(result || null);\n        },\n      );\n    });\n  }\n}\n"],"mappings":"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","names":["err"]}